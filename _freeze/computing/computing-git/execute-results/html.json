{
  "hash": "730840b90c46efac702d6fa3b35dc1e3",
  "result": {
    "markdown": "---\ntitle: \"Setting up Git\"\nexecute:\n  eval: false\n---\n\n\n## Git vs. GitHub\n\n[**Git**](https://en.wikipedia.org/wiki/Git) is a distributed version control system that allows developers to track changes in their code, collaborate with others, and manage different versions of their projects. [**GitHub**](https://en.wikipedia.org/wiki/GitHub), on the other hand, is a web-based platform built around Git's functionality, offering a place to host repositories, collaborate with others, and provide tools for code review, project management, and community interaction. While Git provides the underlying version control capabilities, GitHub enhances these capabilities with a user-friendly interface and additional features. Together, they are crucial for modern software development, fostering collaboration, ensuring code integrity, and enabling the open-source movement.\n\n## Installing up Git\n\n### **For Mac:**\n\n1.  **Check Existing Installation**: Since macOS might already have Git installed, open Terminal and type:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    git --version\n    ```\n    :::\n\n\n    If Git is installed, this command will return the version number. If not, proceed to the next steps.\n\n2.  **Install Homebrew (if not already installed)**: Homebrew is a package manager for macOS that makes it easy to install software. In Terminal, type:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    ```\n    :::\n\n\n3.  **Install Git via Homebrew**: After installing Homebrew, you can easily install Git with:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    brew install git\n    ```\n    :::\n\n\n### Windows (PC)\n\n**For Windows (PC):**\n\n1.  **Download the Installer**: Go to [**Git's official website**](https://git-scm.com/) and download the Windows installer.\n\n2.  **Run the Installer**: Execute the downloaded **`.exe`** file. This will open the installation wizard.\n\n3.  **Installation Settings**: During installation, you'll be presented with several options. For most users, the default settings will be adequate. However, you can customize them based on your preferences.\n\n4.  **Finish the Installation**: Click through the rest of the setup steps, and Git will be installed.\n\n5.  **Open Git Bash or Command Prompt**: Once installed, you can use Git Bash (a Git-specific command terminal) or the regular Command Prompt to use Git.\n\n## Setting up Git\n\n### RStudio\n\n**`usethis`** and **`gitcreds`** are two powerful R packages that simplify the process of setting up and working with Git in RStudio, especially when it comes to handling GitHub token authentication.\n\n**Setting Up Git with RStudio using `usethis` and `gitcreds`**:\n\n1.  **Install and Load the Required Packages**: First, you'll want to ensure you have the necessary packages installed. You can do this from within R or RStudio:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    if (!require(pacman))\n      install.packages(\"pacman\")\n    \n    pacman::p_load(usethis, gitcreds)\n    ```\n    :::\n\n\n2.  **Set Up Git (if you haven't already)**: If you haven't set up Git on your machine, **`usethis`** can help:\n\n    **Method 1** (in the Terminal)\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    git config --global user.name \"Your Name\"\n    git config --global user.email \"youremail@example.com\"\n    ```\n    :::\n\n\n    **Method 2** (`usethis`)\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    usethis::use_git_config(user.name = \"Your Name\", user.email = \"youremail@example.com\")\n    ```\n    :::\n\n\n    1.  **Authenticate with `usethis` and `gitcreds`**:\n\n        `usethis` can be used to create a GitHub token:\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        usethis::create_github_token()\n        ```\n        :::\n\n\n        This will take you to GitHub, where you then **set the name of the token** and **set the expiration** to **No expiration**:\n\n        ![](images/nameToken.png)\n\n        Then scroll all the way down and say **Generate token**:\n\n        ![](images/createToken.png){width=\"250\"}\n\n        **Copy** the token, then **paste it somewhere safe**, [you will never be able to view it again!]{.underline}\n\n        **`gitcreds`** is designed to work with credentials for multiple Git hosting services, but it can specifically help in getting and setting credentials for GitHub.\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        gitcreds::gitcreds_set()\n        ```\n        :::\n\n\n        This will prompt you to enter your personal access token. Remember, tokens are now used instead of passwords for HTTPS Git operations on GitHub.\n\n        **Note**: Another way to create a token:\n\n        -   Go to your GitHub settings (click your profile picture in the top right \\> Settings).\n\n        -   In the left sidebar, click on **`Developer settings`**.\n\n        -   Click on **`Personal access tokens`**, then **`Generate new token`**.\n\n        -   Assign the necessary permissions/scopes to the token. For typical Git operations, you'll need permissions like **`repo`**, **`workflow`**, etc.\n\n        -   Click **`Generate token`**.\n\n        -   Copy the generated token value for use with **`gitcreds`**.\n\n3.  **Subsequent Git Operations**\n\n    For future Git operations (like push/pull) from within RStudio, your credentials are managed by **`gitcreds`**, so you won't need to re-enter them frequently.\n\n4.  **Handling Tokens in the Future**: If you ever need to get, set, or forget your Git credentials, you can use:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gitcreds::gitcreds_get()   # to retrieve\n    gitcreds::gitcreds_set()   # to set/update\n    gitcreds::gitcreds_forget() # to forget/remove\n    ```\n    :::\n\n\n### VS Code\n\n**Setting Up Git Configurations in VS Code:**\n\n1.  **Open VS Code** and ensure you have the **`Git`** extension installed. By default, VS Code comes with it.\n\n2.  **Set Git Configurations**: In the terminal, set your email and name which will be used for commits:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    git config --global user.name \"Your Name\"\n    git config --global user.email \"youremail@example.com\"\n    ```\n    :::\n\n\n**Setting Up Token-Based Authentication in VS Code for GitHub:**\n\n1.  **Generate a New Token on GitHub**:\n\n    -   Go to your GitHub settings (click your profile picture in the top right \\> Settings).\n\n    -   In the left sidebar, click on **`Developer settings`**.\n\n    -   Click on **`Personal access tokens`**, then **`Generate new token`**.\n\n    -   Give your token a name, set the necessary scopes (permissions). For typical Git operations, you'll need repo, workflow, and write:packages, read:packages, delete:packages (for package management), and user (for account details).\n\n    -   Click **`Generate token`** at the bottom.\n\n2.  **Copy the Generated Token**: Once generated, you'll see the token value. Make sure to copy the token now as you won't be able to view it again.\n\n3.  **Use Token in VS Code**: When you push or pull from a GitHub repository, VS Code will prompt for authentication. Instead of your GitHub password, you'll provide the token you just generated.\n\n    If you previously saved your credentials and VS Code isn't prompting for authentication, you might need to update or remove your old credentials.\n\n4.  **For Mac**: If you're on a Mac and had previously saved your credentials in the Keychain, you can update them:\n\n    -   Open **`Keychain Access`**, which you can find with Spotlight.\n\n    -   In Keychain Access, search for **`github.com`**.\n\n    -   Find the internet password entry for **`github.com`** and edit or delete it.\n\n    -   The next time you push/pull from VS Code, you'll be prompted for your username and the new token.\n\n5.  **For Windows**: If you're on Windows and had previously saved your credentials:\n\n    -   Go to the Control Panel \\> User Accounts \\> Credential Manager \\> Windows Credentials.\n\n    -   Find the credentials related to GitHub and edit or remove them.\n\n    -   The next time you push/pull from VS Code, you'll be prompted for your username and the new token.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}