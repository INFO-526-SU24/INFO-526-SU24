{
  "hash": "6cf0db0ff75277651f73a78b1e459701",
  "result": {
    "markdown": "---\ntitle: Deep dive into ggplot2 layers - II\nsubtitle: Lecture 2\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Warm up\n\n## Announcements\n\n-   Thank you for filling out the survey!\n\n-   At this point everyone should be:\n\n    -   On Slack, in public channels for #general, #homework, #course-questions, #project-1, #project-2, #quizzes, and #random\n    -   Make sure your profile photo/avatar and name matches between GitHub and Slack.\n\n-   RQ 1 is due Friday, Jan 26\n\n-   HW 1 is live on the course website, due Monday (Jan 29).\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(countdown)\nlibrary(palmerpenguins)\nlibrary(ggrepel)\nlibrary(here)\nlibrary(waffle)\nlibrary(scales)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7,        # 7\" width\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300             # higher dpi, sharper image\n)\n\n# read in tucsonHousing.csv\ntucsonHousing <- read_csv(here(\n  \"slides\", \"01\", \"data\" ,\"tucsonHousing.csv\"))\n```\n:::\n\n\n## From last time\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntucsonHousing <- tucsonHousing |>\n  mutate(\n    decade_built = (year_built %/% 10) * 10,\n    decade_built_cat = case_when(\n      decade_built <= 1950 ~ \"1950 or before\",\n      decade_built >= 2000 ~ \"2000 or after\",\n      TRUE ~ as.character(decade_built)\n    )\n  )\n\nmean_area_decade <- tucsonHousing |>\n  group_by(decade_built_cat) |>\n  summarise(mean_area = mean(area))\n```\n:::\n\n\n# Geoms\n\n## Geoms\n\n-   Geometric objects, or **geoms** for short, perform the actual rendering of the layer, controlling the type of plot that you create\n\n-   You can think of them as \"the geometric shape used to represent the data\"\n\n## One variable\n\n-   Discrete:\n\n    -   `geom_bar()`: display distribution of discrete variable.\n\n-   Continuous\n\n    -   `geom_histogram()`: bin and count continuous variable, display with bars\n\n    -   `geom_density()`: smoothed density estimate\n\n    -   `geom_dotplot()`: stack individual points into a dot plot\n\n    -   `geom_freqpoly()`: bin and count continuous variable, display with lines\n\n## Aside\n\nAlways use \"typewriter text\" (monospace font) when writing function names, and follow with `()`, e.g.,\n\n-   `geom_freqpoly()`\n\n-   `mean()`\n\n-   `lm()`\n\n## `geom_dotplot()`\n\n::: task\nWhat does each point represent? How are their locations determined? What do the x and y axes represent?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = price)) +\n  geom_dotplot(binwidth = 50000)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Comparing across groups {.smaller}\n\n::: task\nWhich of the following allows for easier comparison across groups?\n:::\n\n::: panel-tabset\n## Histogram\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = price, fill = decade_built_cat)) +\n  geom_histogram(binwidth = 100000)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Frequency polygon\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = price, color = decade_built_cat)) +\n  geom_freqpoly(binwidth = 100000, size = 1)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## Two variables - both continuous\n\n-   `geom_point()`: scatterplot\n\n-   `geom_quantile()`: smoothed quantile regression\n\n-   `geom_rug()`: marginal rug plots\n\n-   `geom_smooth()`: smoothed line of best fit\n\n-   `geom_text()`: text labels\n\n## Two variables - show density\n\n-   `geom_bin2d()`: bin into rectangles and count\n\n-   `geom_density2d()`: smoothed 2d density estimate\n\n-   `geom_hex()`: bin into hexagons and count\n\n## `geom_hex()`\n\nNot very helpful for 112 observations:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = area, y = price)) +\n  geom_hex()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_hex()`\n\nMore helpful for 53940 observations:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_hex()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_hex()` and warnings\n\n-   Requires installing the [**hexbin**](https://cran.r-project.org/web/packages/hexbin/index.html) package separately!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"hexbin\")\n```\n:::\n\n\n-   Otherwise you might see\n\n<!-- -->\n\n```         \nWarning: Computation failed in `stat_binhex()`\n```\n\n## Two variables\n\n-   At least one discrete\n\n    -   `geom_count()`: count number of point at distinct locations\n\n    -   `geom_jitter()`: randomly jitter overlapping points\n\n-   One continuous, one discrete\n\n    -   `geom_col()`: a bar chart of pre-computed summaries\n\n    -   `geom_boxplot()`: boxplots\n\n    -   `geom_violin()`: show density of values in each group\n\n## `geom_jitter()` {.smaller}\n\n::: task\nHow are the following three plots different?\n:::\n\n::: panel-tabset\n## Plot A\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = bed, y = price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot B\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot C\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## `geom_jitter()` and `set.seed()` {.smaller}\n\n::: panel-tabset\n## Plot A\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\nggplot(tucsonHousing, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot B\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\nggplot(tucsonHousing, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## Two variables {.smaller}\n\n-   One time, one continuous\n    -   `geom_area()`: area plot\n    -   `geom_line()`: line plot\n    -   `geom_step()`: step plot\n-   Display uncertainty:\n    -   `geom_crossbar()`: vertical bar with center\n    -   `geom_errorbar()`: error bars\n    -   `geom_linerange()`: vertical line\n    -   `geom_pointrange()`: vertical line with center\n-   Spatial\n    -   `geom_sf()`: for map data (more on this later...)\n\n## Average price per year built {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean_price_year <- tucsonHousing |>\n  group_by(year_built) |>\n  summarise(\n    n = n(),\n    mean_price = mean(price),\n    sd_price = sd(price)\n    )\n\nmean_price_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 56 × 4\n   year_built     n mean_price sd_price\n        <dbl> <int>      <dbl>    <dbl>\n 1       1936     1    330000       NA \n 2       1943     1    260000       NA \n 3       1948     1    310000       NA \n 4       1950     2    270000        0 \n 5       1951     2    172450.   60174.\n 6       1952     3    382833.  104205.\n 7       1953     3    365133.  132328.\n 8       1954     1    295000       NA \n 9       1956     3    279333.   25891.\n10       1957     1    299000       NA \n# ℹ 46 more rows\n```\n:::\n:::\n\n\n## `geom_line()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mean_price_year, aes(x = year_built, y = mean_price)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_area()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mean_price_year, aes(x = year_built, y = mean_price)) +\n  geom_area()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_step()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mean_price_year, aes(x = year_built, y = mean_price)) +\n  geom_step()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Let's clean things up a bit!\n\n::: panel-tabset\n## Code\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = area, y = price)) +\n  geom_point(alpha = 0.6, size = 2, color = \"#012169\") +\n  scale_x_continuous(labels = label_number(big.mark = \",\")) +\n  scale_y_continuous(labels = label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Area (square feet)\",\n    y = \"Sale price (USD)\",\n    title = \"Sale prices of homes in Tucson\",\n    subtitle = \"As of November 2020\",\n    caption = \"Source: Zillow.com\"\n  )\n```\n:::\n\n\n## Plot\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## Three variables\n\n-   `geom_contour()`: contours\n-   `geom_tile()`: tile the plane with rectangles\n-   `geom_raster()`: fast version of `geom_tile()` for equal sized tiles\n\n## `geom_tile()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tucsonHousing, aes(x = bed, y = bath)) +\n geom_tile(aes(fill = price))\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=2100}\n:::\n:::\n",
    "supporting": [
      "02-layers-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}