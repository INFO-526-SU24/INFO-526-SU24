{
  "hash": "b24b016143f61fbbd584147b3d5a252f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Data wrangling - II\nsubtitle: Lecture 4\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(ggthemes)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7,        # 7\" width\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300             # higher dpi, sharper image\n)\n```\n:::\n\n\n# Transforming and reshaping a single data frame (cont.)\n\n## Data: Hotel bookings\n\n-   Data from two hotels: one resort and one city hotel\n-   Observations: Each row represents a hotel booking\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n```\n:::\n\n\n## Scenario 1\n\n::: hand\nWe...\n\nhave a single data frame\n\nwant to slice it, and dice it, and juice it, and process it, so we can plot it\n:::\n\n## Monthly bookings {.smaller}\n\n::: task\nCome up with a plan for making the following visualization and write the pseudocode.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-wrangle-2_files/figure-revealjs/monthly-bookings-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Livecoding {.smaller}\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nhotels <- hotels |>\n  mutate(\n    arrival_date_month = fct_relevel(arrival_date_month, month.name),\n    season = case_when(\n      arrival_date_month %in% c(\"December\", \"January\", \"February\") ~ \"Winter\",\n      arrival_date_month %in% c(\"March\", \"April\", \"May\") ~ \"Spring\",\n      arrival_date_month %in% c(\"June\", \"July\", \"August\") ~ \"Summer\",\n      TRUE ~ \"Fall\"\n    ),\n    season = fct_relevel(season, \"Winter\", \"Spring\", \"Summer\", \"Fall\")\n  )\n\nhotels |>\n  count(season, hotel, arrival_date_month) |>\n  ggplot(aes(x = arrival_date_month, y = n, group = hotel, linetype = hotel)) +\n  geom_line(linewidth = 0.8, color = \"cornsilk4\") +\n  geom_point(aes(shape = season, color = season), size = 4, show.legend = FALSE) +\n  scale_x_discrete(labels = month.abb) +\n  scale_color_colorblind() +\n  scale_shape_manual(values = c(\"circle\", \"square\", \"diamond\", \"triangle\")) +\n  labs(\n    x = \"Arrival month\", y = \"Number of bookings\", linetype = NULL,\n    title = \"Number of monthly bookings\",\n    subtitle = \"July 2015 to August 2017\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    legend.position = c(0.12, 0.9),\n    legend.box.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.subtitle = element_text(color = \"cornsilk4\"),\n    plot.caption = element_text(color = \"cornsilk4\")\n  )\n```\n:::\n\n\n## A few takeaways\n\n-   `forcats::fct_relevel()` in a `mutate()` is useful for custom ordering of levels of a factor variable\n\n-   `summarize()` after `group_by()` with multiple variables results in a message about the grouping structure of the resulting data frame -- the message can be supressed by defining `.groups` (e.g., `.groups = \"drop\"` or `.groups = \"keep\"`)\n\n-   `summarize()` also lets you get away with being sloppy and not naming your new column, but that's not recommended!\n\n## Rowwise operations {.smaller}\n\n::: task\nWe want to calculate the total number of guests for each booking. Why does the following not work?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels |>\n  select(adults, children, babies) |>\n  mutate(guests = sum(c(adults, children, babies)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 4\n   adults children babies guests\n    <dbl>    <dbl>  <dbl>  <dbl>\n 1      2        0      0     NA\n 2      2        0      0     NA\n 3      1        0      0     NA\n 4      1        0      0     NA\n 5      2        0      0     NA\n 6      2        0      0     NA\n 7      2        0      0     NA\n 8      2        0      0     NA\n 9      2        0      0     NA\n10      2        0      0     NA\n# ℹ 119,380 more rows\n```\n\n\n:::\n:::\n\n\n## Rowwise operations {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nhotels |>\n  select(adults, children, babies) |>\n  rowwise() |> \n  mutate(guests = sum(c(adults, children, babies))) |>\n  filter(adults > 0, children > 0, babies > 0) # to show sum works\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 172 × 4\n# Rowwise: \n   adults children babies guests\n    <dbl>    <dbl>  <dbl>  <dbl>\n 1      2        1      1      4\n 2      2        1      1      4\n 3      2        1      1      4\n 4      2        1      1      4\n 5      2        1      1      4\n 6      2        1      1      4\n 7      2        1      1      4\n 8      2        2      1      5\n 9      2        2      1      5\n10      1        2      1      4\n# ℹ 162 more rows\n```\n\n\n:::\n:::\n\n\n## Columnwise operations {.smaller}\n\nUse `across()` combined with `summarise()` to calculate summary statistics for multiple columns at once:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|4\"}\nhotels |>\n  summarise(across(.cols = starts_with(\"stays\"),  mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  stays_in_weekend_nights stays_in_week_nights\n                    <dbl>                <dbl>\n1                   0.928                 2.50\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"|2|4\"}\nhotels |>\n  summarise(across(.cols = starts_with(\"stays\"),  list(mean, sd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  stays_in_weekend_nights_1 stays_in_weekend_nights_2\n                      <dbl>                     <dbl>\n1                     0.928                     0.999\n# ℹ 2 more variables: stays_in_week_nights_1 <dbl>,\n#   stays_in_week_nights_2 <dbl>\n```\n\n\n:::\n:::\n\n\n## Select helpers {.smaller}\n\n-   `starts_with()`: Starts with a prefix\n-   `ends_with()`: Ends with a suffix\n-   `contains()`: Contains a literal string\n-   `num_range()`: Matches a numerical range like x01, x02, x03\n-   `one_of()`: Matches variable names in a character vector\n-   `everything()`: Matches all variables\n-   `last_col()`: Select last variable, possibly with an offset\n-   `matches()`: Matches a regular expression (a sequence of symbols/characters expressing a string/pattern to be searched for within text)\n\n::: aside\nSee help for any of these functions for more info, e.g. `?everything`.\n:::\n\n## Columnwise operations {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nhotels |>\n  group_by(hotel, is_canceled) |>\n  summarise(\n    across(.cols = starts_with(\"stays\"),  list(mean = mean, sd = sd), .names = \"{.fn}_{.col}\") \n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n# Groups:   hotel [2]\n  hotel is_canceled mean_stays_in_weeken…¹ sd_stays_in_weekend_…²\n  <chr>       <dbl>                  <dbl>                  <dbl>\n1 City…           0                  0.801                  0.862\n2 City…           1                  0.788                  0.917\n3 Reso…           0                  1.13                   1.14 \n4 Reso…           1                  1.34                   1.14 \n# ℹ abbreviated names: ¹​mean_stays_in_weekend_nights,\n#   ²​sd_stays_in_weekend_nights\n# ℹ 2 more variables: mean_stays_in_week_nights <dbl>,\n#   sd_stays_in_week_nights <dbl>\n```\n\n\n:::\n:::\n\n\n## Columnwise operations {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nhotels |>\n  group_by(hotel, is_canceled) |>\n  summarise(\n    across(.cols = starts_with(\"stays\"),  list(mean = mean, sd = sd), .names = \"{.fn}_{.col}\"),\n    .groups = \"drop\"\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  hotel is_canceled mean_stays_in_weeken…¹ sd_stays_in_weekend_…²\n  <chr>       <dbl>                  <dbl>                  <dbl>\n1 City…           0                  0.801                  0.862\n2 City…           1                  0.788                  0.917\n3 Reso…           0                  1.13                   1.14 \n4 Reso…           1                  1.34                   1.14 \n# ℹ abbreviated names: ¹​mean_stays_in_weekend_nights,\n#   ²​sd_stays_in_weekend_nights\n# ℹ 2 more variables: mean_stays_in_week_nights <dbl>,\n#   sd_stays_in_week_nights <dbl>\n```\n\n\n:::\n:::\n\n\n## Setup for next example: `hotel_summary` {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4-8|9\"}\nhotels_summary <- hotels |>\n  group_by(hotel, is_canceled) |>\n  summarise(\n    across(\n      .cols = starts_with(\"stays\"),\n      list(mean = mean),\n      .names = \"{.fn}_{.col}\"\n    ),\n    .groups = \"drop\"\n  )\n\nhotels_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  hotel is_canceled mean_stays_in_weeken…¹ mean_stays_in_week_n…²\n  <chr>       <dbl>                  <dbl>                  <dbl>\n1 City…           0                  0.801                   2.12\n2 City…           1                  0.788                   2.27\n3 Reso…           0                  1.13                    3.01\n4 Reso…           1                  1.34                    3.44\n# ℹ abbreviated names: ¹​mean_stays_in_weekend_nights,\n#   ²​mean_stays_in_week_nights\n```\n\n\n:::\n:::\n\n\n## \n\n::: task\nWhich variables are plotted in the following visualization? Which aesthetics are they mapped to? Recreate the visualization.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-wrangle-2_files/figure-revealjs/stay-nights-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Livecoding\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nhotels_summary |>\n  mutate(is_canceled = if_else(is_canceled == 0, \"Not canceled\", \"Canceled\")) |>\n  pivot_longer(cols = starts_with(\"mean\"),\n               names_to = \"day_type\",\n               values_to = \"mean_stays\",\n               names_prefix = \"mean_stays_in_\") |>\n  mutate(\n    day_type = if_else(str_detect(day_type, \"weekend\"), \"Weekend\", \"Weekday\")\n    ) |>\n  ggplot(aes(x = str_wrap(is_canceled, 10), y = mean_stays, \n             group = hotel, color = hotel)) +\n  geom_point(show.legend = FALSE) +\n  geom_line(aes(linetype = hotel), linewidth = 1) +\n  facet_wrap(~day_type) +\n  labs(\n    x = \"Booking status\",\n    y = \"Mean number of\\nnights of stay\",\n    color = NULL, linetype = NULL,\n    title = \"Mean number of stays\",\n    subtitle = \"By hotel type and booking status\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  scale_color_manual(values = c(\"cornsilk4\", \"deepskyblue3\")) +\n  scale_y_continuous(limits = c(0, 4), breaks = 0:4) +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n## `pivot_wider()` and `pivot_longer()`\n\n::: columns\n::: {.column width=\"50%\"}\n-   From **tidyr**\n-   Incredibly useful for reshaping for plotting\n-   Lots of extra arguments to help with reshaping pain!\n-   Refer to [pivoting vignette](https://tidyr.tidyverse.org/articles/pivot.html) when needed\n:::\n\n::: {.column width=\"50%\"}\n![](images/tidyr-longer-wider.gif){fig-alt=\"Animation showing what pivoting longer and wider look like\" fig-align=\"center\"}\n:::\n:::\n\n# Stats\n\n## Stats \\< \\> geoms {.smaller}\n\n-   Statistical transformation (**stat**) transforms the data, typically by summarizing\n-   Many of ggplot2's stats are used behind the scenes to generate many important geoms\n\n| `stat`            | geom                                                |\n|-------------------|-----------------------------------------------------|\n| `stat_bin()`      | `geom_bar()`, `geom_freqpoly()`, `geom_histogram()` |\n| `stat_bin2d()`    | `geom_bin2d()`                                      |\n| `stat_bindot()`   | `geom_dotplot()`                                    |\n| `stat_binhex()`   | `geom_hex()`                                        |\n| `stat_boxplot()`  | `geom_boxplot()`                                    |\n| `stat_contour()`  | `geom_contour()`                                    |\n| `stat_quantile()` | `geom_quantile()`                                   |\n| `stat_smooth()`   | `geom_smooth()`                                     |\n| `stat_sum()`      | `geom_count()`                                      |\n\n## Layering with stats {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|5-8\"}\nhotels |>\n  filter(adr < 4000) |>\n  ggplot(aes(x = arrival_date_month, y = adr)) +\n  geom_point(alpha = 0.5) +\n  stat_summary(\n    geom = \"point\", fun = \"median\", \n    colour = \"red\", size = 5, pch = 4, stroke = 2\n  ) +\n  facet_wrap(~ hotel, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](04-wrangle-2_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Alternate: layering with stats {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|5-8\"}\nhotels |>\n  filter(adr < 4000) |>\n  ggplot(aes(x = arrival_date_month, y = adr)) +\n  geom_point(alpha = 0.5) +\n  geom_point(\n    stat = \"summary\", fun = \"median\", \n    colour = \"red\", size = 5, pch = 4, stroke = 2\n  ) +\n  facet_wrap(~ hotel, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](04-wrangle-2_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Statistical transformations {.smaller}\n\n::: task\nWhat can you say about the distribution of price from the following QQ plot?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4-5\"}\nhotels |>\n  filter(adr < 4000) |>\n  ggplot(aes(sample = adr)) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(y = \"adr\")\n```\n\n::: {.cell-output-display}\n![](04-wrangle-2_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=2400}\n:::\n:::\n",
    "supporting": [
      "04-wrangle-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}