{
  "hash": "353e7a39b7f3fe2288908c79c27a0dbb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Visualizing geospatial data II\nsubtitle: Lecture 14\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\n  warning: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Large data advice\n\n-   A note on how R / memory usage\n\n-   [`rm()` and `gc()`](https://stackoverflow.com/questions/8813753/what-is-the-difference-between-gc-and-rm)\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggspatial)\nlibrary(patchwork)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# Spatial data in R\n\n## Packages for geospatial data in R {.smaller}\n\n::: medium\nR has a rich package ecosystem for read/writing, manipulating, and analyzing geospatial data.\n\nSome core packages:\n\n-   **sp** - core classes for handling spatial data, additional utility functions - **Deprecated**\n\n-   **rgdal** - R interface to `gdal` (Geospatial Data Abstraction Library) for reading and writing spatial data - **Deprecated**\n\n-   **rgeos** - R interface to `geos` (Geometry Engine Open Source) library for querying and manipulating spatial data. Reading and writing WKT. - **Deprecated**\n\n-   **sf** - Combines the functionality of `sp`, `rgdal`, and `rgeos` into a single package based on tidy simple features.\n\n-   **raster** - classes and tools for handling spatial raster data.\n\n-   **stars** - Reading, manipulating, writing and plotting spatiotemporal arrays (rasters)\n:::\n\n::: aside\nSee more - [Spatial task view](http://cran.r-project.org/web/views/Spatial.html)\n:::\n\n## The sf package\n\n::: columns\n::: {.column width=\"70%\"}\nA package that provides simple features access for R:\n\n-   represents simple features as records in a `data.frame` or `tibble` with a `geometry` list-column\n-   represents natively in R all 17 simple feature types for all dimensions\n\nLearn more at [r-spatial.github.io/sf](https://r-spatial.github.io/sf).\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/sf-hex.gif){fig-align='center' fig-alt='Hex logo for sf'}\n:::\n:::\n\n:::\n:::\n\n## Installing **sf** {.smaller}\n\nThis is the hardest part of using the **sf** package, difficulty comes from is dependence on several external libraries (`geos`, `gdal`, and `proj`).\n\n-   If using the containers, **sf** is already installed for you.\n-   If using your own machine:\n    -   *Windows* - installing from source works when Rtools is installed (system requirements are downloaded from rwinlib)\n    -   *MacOS* - install dependencies via homebrew: `gdal2`, `geos`, `proj`.\n    -   *Linux* - Install development packages for GDAL (\\>= 2.0.0), GEOS (\\>= 3.3.0) and Proj.4 (\\>= 4.8.0) from your package manager of choice.\n\nMore specific details are included in the [package README on github](https://github.com/r-spatial/sf#installing).\n\n## Simple Features for R\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/sf.jpeg){fig-align='center' fig-alt='Simple features for R' width=60%}\n:::\n:::\n\n\n::: aside\nIllustration by Allison Horst.\n:::\n\n## Simple Features\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n# Using sf\n\n## Get world data\n\nUsing the **rnaturalearth** package\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nclass(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n## What's in `world`?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnames(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"scalerank\"  \"featurecla\" \"labelrank\"  \"sovereignt\"\n [5] \"sov_a3\"     \"adm0_dif\"   \"level\"      \"type\"      \n [9] \"admin\"      \"adm0_a3\"    \"geou_dif\"   \"geounit\"   \n[13] \"gu_a3\"      \"su_dif\"     \"subunit\"    \"su_a3\"     \n[17] \"brk_diff\"   \"name\"       \"name_long\"  \"brk_a3\"    \n[21] \"brk_name\"   \"brk_group\"  \"abbrev\"     \"postal\"    \n[25] \"formal_en\"  \"formal_fr\"  \"note_adm0\"  \"note_brk\"  \n[29] \"name_sort\"  \"name_alt\"   \"mapcolor7\"  \"mapcolor8\" \n[33] \"mapcolor9\"  \"mapcolor13\" \"pop_est\"    \"gdp_md_est\"\n[37] \"pop_year\"   \"lastcensus\" \"gdp_year\"   \"economy\"   \n[41] \"income_grp\" \"wikipedia\"  \"fips_10\"    \"iso_a2\"    \n[45] \"iso_a3\"     \"iso_n3\"     \"un_a3\"      \"wb_a2\"     \n[49] \"wb_a3\"      \"woe_id\"     \"adm0_a3_is\" \"adm0_a3_us\"\n[53] \"adm0_a3_un\" \"adm0_a3_wb\" \"continent\"  \"region_un\" \n[57] \"subregion\"  \"region_wb\"  \"name_len\"   \"long_len\"  \n[61] \"abbrev_len\" \"tiny\"       \"homepart\"   \"geometry\"  \n```\n\n\n:::\n:::\n\n\n## What's in `world`?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nattributes(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n [1] \"scalerank\"  \"featurecla\" \"labelrank\"  \"sovereignt\"\n [5] \"sov_a3\"     \"adm0_dif\"   \"level\"      \"type\"      \n [9] \"admin\"      \"adm0_a3\"    \"geou_dif\"   \"geounit\"   \n[13] \"gu_a3\"      \"su_dif\"     \"subunit\"    \"su_a3\"     \n[17] \"brk_diff\"   \"name\"       \"name_long\"  \"brk_a3\"    \n[21] \"brk_name\"   \"brk_group\"  \"abbrev\"     \"postal\"    \n[25] \"formal_en\"  \"formal_fr\"  \"note_adm0\"  \"note_brk\"  \n[29] \"name_sort\"  \"name_alt\"   \"mapcolor7\"  \"mapcolor8\" \n[33] \"mapcolor9\"  \"mapcolor13\" \"pop_est\"    \"gdp_md_est\"\n[37] \"pop_year\"   \"lastcensus\" \"gdp_year\"   \"economy\"   \n[41] \"income_grp\" \"wikipedia\"  \"fips_10\"    \"iso_a2\"    \n[45] \"iso_a3\"     \"iso_n3\"     \"un_a3\"      \"wb_a2\"     \n[49] \"wb_a3\"      \"woe_id\"     \"adm0_a3_is\" \"adm0_a3_us\"\n[53] \"adm0_a3_un\" \"adm0_a3_wb\" \"continent\"  \"region_un\" \n[57] \"subregion\"  \"region_wb\"  \"name_len\"   \"long_len\"  \n[61] \"abbrev_len\" \"tiny\"       \"homepart\"   \"geometry\"  \n\n$row.names\n  [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14\n [16]  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n [31]  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44\n [46]  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59\n [61]  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74\n [76]  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89\n [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104\n[106] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119\n[121] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134\n[136] 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149\n[151] 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164\n[166] 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179\n[181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194\n[196] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209\n[211] 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224\n[226] 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239\n[241] 240\n\n$class\n[1] \"sf\"         \"data.frame\"\n\n$sf_column\n[1] \"geometry\"\n\n$agr\n scalerank featurecla  labelrank sovereignt     sov_a3 \n      <NA>       <NA>       <NA>       <NA>       <NA> \n  adm0_dif      level       type      admin    adm0_a3 \n      <NA>       <NA>       <NA>       <NA>       <NA> \n  geou_dif    geounit      gu_a3     su_dif    subunit \n      <NA>       <NA>       <NA>       <NA>       <NA> \n     su_a3   brk_diff       name  name_long     brk_a3 \n      <NA>       <NA>       <NA>       <NA>       <NA> \n  brk_name  brk_group     abbrev     postal  formal_en \n      <NA>       <NA>       <NA>       <NA>       <NA> \n formal_fr  note_adm0   note_brk  name_sort   name_alt \n      <NA>       <NA>       <NA>       <NA>       <NA> \n mapcolor7  mapcolor8  mapcolor9 mapcolor13    pop_est \n      <NA>       <NA>       <NA>       <NA>       <NA> \ngdp_md_est   pop_year lastcensus   gdp_year    economy \n      <NA>       <NA>       <NA>       <NA>       <NA> \nincome_grp  wikipedia    fips_10     iso_a2     iso_a3 \n      <NA>       <NA>       <NA>       <NA>       <NA> \n    iso_n3      un_a3      wb_a2      wb_a3     woe_id \n      <NA>       <NA>       <NA>       <NA>       <NA> \nadm0_a3_is adm0_a3_us adm0_a3_un adm0_a3_wb  continent \n      <NA>       <NA>       <NA>       <NA>       <NA> \n region_un  subregion  region_wb   name_len   long_len \n      <NA>       <NA>       <NA>       <NA>       <NA> \nabbrev_len       tiny   homepart \n      <NA>       <NA>       <NA> \nLevels: constant aggregate identity\n```\n\n\n:::\n:::\n\n\n## sf geometry\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworld |>\n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 241 features and 0 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -89.99893 xmax: 180 ymax: 83.59961\nGeodetic CRS:  +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\nFirst 10 features:\n                         geometry\n1  MULTIPOLYGON (((-69.89912 1...\n2  MULTIPOLYGON (((74.89131 37...\n3  MULTIPOLYGON (((14.19082 -5...\n4  MULTIPOLYGON (((-63.00122 1...\n5  MULTIPOLYGON (((20.06396 42...\n6  MULTIPOLYGON (((20.61133 60...\n7  MULTIPOLYGON (((1.706055 42...\n8  MULTIPOLYGON (((53.92783 24...\n9  MULTIPOLYGON (((-64.54917 -...\n10 MULTIPOLYGON (((45.55234 40...\n```\n\n\n:::\n:::\n\n\n## Map the world with sf\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nggplot(data = world) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plays nicely with ggplot2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = world) +\n  geom_sf(fill = \"cornsilk\", size = 0.2) +\n  labs(x = \"Longitude\", y = \"Latitude\", title = \"World map\") +\n  theme(panel.background = element_rect(\"lightblue\"))\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Plays nicely with ggplot2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = world) +\n  geom_sf(aes(fill = pop_est)) +\n  scale_fill_viridis_c(option = \"plasma\", trans = \"sqrt\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Projections with sf\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|3-5\"}\nggplot(data = world) +\n  geom_sf() +\n  coord_sf(\n    crs = \"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs\"\n  )\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Scale bar and North arrow\n\nUsing the **ggspatial** package:\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(data = world) +\n  geom_sf(fill = \"cornsilk\") +\n  annotation_scale(location = \"bl\", width_hint = 0.4) +\n  annotation_north_arrow(\n    location = \"bl\", which_north = \"true\",\n    pad_x = unit(0.5, \"in\"), pad_y = unit(0.3, \"in\"),\n    style = north_arrow_fancy_orienteering\n  ) +\n  coord_sf(xlim = c(24, 45), ylim = c(32, 43))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale on map varies by more than 10%, scale bar may be inaccurate\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## The scale warning\n\n```         \nScale on map varies by more than 10%, scale bar may be inaccurate\n```\n\n> Note the warning of the inaccurate scale bar: since the map uses unprojected data in longitude/latitude (WGS84) on an equidistant cylindrical projection (all meridians being parallel), length in (kilo)meters on the map directly depends mathematically on the degree of latitude. Plots of small regions or projected data will often allow for more accurate scale bars.\n\n::: aside\nSource: [Drawing beautiful maps programmatically with R, sf and ggplot2 --- Part 1: Basics](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)\n:::\n\n## Reading, writing, and converting\n\n-   `sf`\n    -   `st_read()` / `st_write()` - Shapefile, GeoJSON, KML, ...\n    -   `read_sf()` / `write_sf()` - Same, supports tibbles ...\n    -   `st_as_sfc()` / `st_as_wkt()` - sf \\<-\\> WKT\n    -   `st_as_sfc()` / `st_as_binary()` - sf \\<-\\> WKB\n    -   `st_as_sfc()` / `as(x, \"Spatial\")` - sf \\<-\\> sp\n\n::: aside\nSee [sf vignette #2 - Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html).\n:::\n\n## Example data\n\nNorth Carolina counties, US airports, and US highways:\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnc <- read_sf(\"data/nc_counties/\", quiet = TRUE)\nair <- read_sf(\"data/airports/\", quiet = TRUE)\nhwy <- read_sf(\"data/us_interstates/\", quiet = TRUE)\n```\n:::\n\n:::\n\n## NC Counties\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 100 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32186 ymin: 33.84175 xmax: -75.46003 ymax: 36.58815\nGeodetic CRS:  NAD83\n# A tibble: 100 × 9\n     AREA PERIMETER COUNTYP010 STATE COUNTY      FIPS  STATE_FIPS\n    <dbl>     <dbl>      <dbl> <chr> <chr>       <chr> <chr>     \n 1 0.112       1.61       1994 NC    Ashe County 37009 37        \n 2 0.0616      1.35       1996 NC    Alleghany … 37005 37        \n 3 0.140       1.77       1998 NC    Surry Coun… 37171 37        \n 4 0.0891      1.43       1999 NC    Gates Coun… 37073 37        \n 5 0.0687      4.43       2000 NC    Currituck … 37053 37        \n 6 0.119       1.40       2001 NC    Stokes Cou… 37169 37        \n 7 0.0626      2.11       2002 NC    Camden Cou… 37029 37        \n 8 0.115       1.46       2003 NC    Warren Cou… 37185 37        \n 9 0.143       2.40       2004 NC    Northampto… 37131 37        \n10 0.0925      1.81       2005 NC    Hertford C… 37091 37        \n# ℹ 90 more rows\n# ℹ 2 more variables: SQUARE_MIL <dbl>,\n#   geometry <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n:::\n\n## US Airports\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nair\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 940 features and 16 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -176.646 ymin: 17.70156 xmax: -64.80172 ymax: 71.28545\nGeodetic CRS:  NAD83\n# A tibble: 940 × 17\n   AIRPRTX010 FEATURE ICAO  IATA  AIRPT_NAME          CITY  STATE\n        <dbl> <chr>   <chr> <chr> <chr>               <chr> <chr>\n 1          0 AIRPORT KGON  GON   GROTON-NEW LONDON … GROT… CT   \n 2          3 AIRPORT K6S5  6S5   RAVALLI COUNTY AIR… HAMI… MT   \n 3          4 AIRPORT KMHV  MHV   MOJAVE AIRPORT      MOJA… CA   \n 4          6 AIRPORT KSEE  SEE   GILLESPIE FIELD AI… SAN … CA   \n 5          7 AIRPORT KFPR  FPR   ST LUCIE COUNTY IN… FORT… FL   \n 6          8 AIRPORT KRYY  RYY   COBB COUNTY-MC COL… ATLA… GA   \n 7         10 AIRPORT KMKL  MKL   MC KELLAR-SIPES RE… JACK… TN   \n 8         11 AIRPORT KCCR  CCR   BUCHANAN FIELD AIR… CONC… CA   \n 9         13 AIRPORT KJYO  JYO   LEESBURG EXECUTIVE… LEES… VA   \n10         15 AIRPORT KCAD  CAD   WEXFORD COUNTY AIR… CADI… MI   \n# ℹ 930 more rows\n# ℹ 10 more variables: STATE_FIPS <chr>, COUNTY <chr>,\n#   FIPS <chr>, TOT_ENP <dbl>, LATITUDE <dbl>, LONGITUDE <dbl>,\n#   ELEV <dbl>, ACT_DATE <chr>, CNTL_TWR <chr>,\n#   geometry <POINT [°]>\n```\n\n\n:::\n:::\n\n:::\n\n## US highways\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhwy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 233 features and 3 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: -7472582 ymin: 2911107 xmax: 2443707 ymax: 8208428\nProjected CRS: NAD83 / UTM zone 15N\n# A tibble: 233 × 4\n   ROUTE_NUM DIST_MILES DIST_KM                          geometry\n   <chr>          <dbl>   <dbl>             <MULTILINESTRING [m]>\n 1 I10          2449.   3941.   ((-1881200 4072307, -1879922 407…\n 2 I105           20.8    33.4  ((-1910156 5339585, -1910139 533…\n 3 I110           41.4    66.6  ((1054139 3388879, 1054287 33859…\n 4 I115            1.58    2.55 ((-1013796 5284243, -1013138 528…\n 5 I12            85.3   137.   ((680741.7 3366581, 682709.8 336…\n 6 I124            1.73    2.79 ((1201467 3906285, 1201643 39059…\n 7 I126            3.56    5.72 ((1601502 3829718, 1602136 38290…\n 8 I129            3.1     4.99 ((217446 4705389, 217835.1 47053…\n 9 I135           96.3   155.   ((96922.97 4313125, 96561.85 431…\n10 I15          1436.   2311    ((-882875.7 5602902, -882998.3 5…\n# ℹ 223 more rows\n```\n\n\n:::\n:::\n\n:::\n\n## sf structure\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [100 × 9] (S3: sf/tbl_df/tbl/data.frame)\n $ AREA      : num [1:100] 0.1118 0.0616 0.1402 0.0891 0.0687 ...\n $ PERIMETER : num [1:100] 1.61 1.35 1.77 1.43 4.43 ...\n $ COUNTYP010: num [1:100] 1994 1996 1998 1999 2000 ...\n $ STATE     : chr [1:100] \"NC\" \"NC\" \"NC\" \"NC\" ...\n $ COUNTY    : chr [1:100] \"Ashe County\" \"Alleghany County\" \"Surry County\" \"Gates County\" ...\n $ FIPS      : chr [1:100] \"37009\" \"37005\" \"37171\" \"37073\" ...\n $ STATE_FIPS: chr [1:100] \"37\" \"37\" \"37\" \"37\" ...\n $ SQUARE_MIL: num [1:100] 429 236 539 342 264 ...\n $ geometry  :sfc_MULTIPOLYGON of length 100; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:1030, 1:2] -81.7 -81.7 -81.7 -81.6 -81.6 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:8] \"AREA\" \"PERIMETER\" \"COUNTYP010\" \"STATE\" ...\n```\n\n\n:::\n:::\n\n:::\n\n## sf classes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(nc$geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n\n```{.r .cell-code}\nclass(st_geometry(nc))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(nc$geometry[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"XY\"           \"MULTIPOLYGON\" \"sfg\"         \n```\n\n\n:::\n:::\n\n\n## Projections / CRS\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nst_crs(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n```\n\n\n:::\n:::\n\n:::\n\n::: aside\n[EPSG Geodetic Parameter Dataset](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset)\n:::\n\n## \n\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nst_crs(hwy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD83 / UTM zone 15N \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 15N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 15N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-93,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    ID[\"EPSG\",26915]]\n```\n\n\n:::\n:::\n\n:::\n\n## Projections\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/projs-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n# Plotting with ggplot2\n\n## `geom_sf()`\n\nNo automatic plotting:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(nc) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `aes()`thetic mappings\n\nMore expressive: to plot variables, use aesthetic mappings as usual:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(nc) +\n  geom_sf(aes(fill = AREA))\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Many variables at once\n\nUsing **patchwork:**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_area <- ggplot(nc) + \n  geom_sf(aes(fill = AREA))\np_perimeter <- ggplot(nc) + \n  geom_sf(aes(fill = SQUARE_MIL)) +\n  theme(axis.text.y = element_blank())\np_area + p_perimeter\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=3000}\n:::\n:::\n\n\n## ggplot2 + projections\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(st_transform(nc, 3631)) +\n  geom_sf(aes(fill = AREA))\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## ggplot2 + viridis\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(st_transform(nc, 3631)) +\n  geom_sf(aes(fill = AREA)) +\n  scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-29-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## ggplot2 + calculations\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(st_transform(nc, 3631)) +\n  geom_sf(aes(fill = AREA / PERIMETER^2)) +\n  scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-30-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Other color palettes (discrete)\n\n![](images/brewer.png){fig-align=\"center\" width=\"50%\"}\n\n::: aside\n[ColorBrewer 2.0](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) - color advice for maps\n:::\n\n## Picking palette breaks\n\n![](images/breaks1.png){fig-align=\"center\" width=\"80%\"}\n\n::: aside\nFrom [How to choose an interpolation for your color scale](https://blog.datawrapper.de/interpolation-for-color-scales-and-maps/)\n:::\n\n## Picking palette breaks\n\n![](images/breaks2.png){fig-align=\"center\" width=\"80%\"}\n\n::: aside\nFrom [How to choose an interpolation for your color scale](https://blog.datawrapper.de/interpolation-for-color-scales-and-maps/)\n:::\n\n# Layering maps\n\n## Data {.smaller}\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = nc) +\n  geom_sf() +\n  labs(title = \"NC Counties\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\nggplot(data = air) +\n  geom_sf(color = \"blue\") +\n  labs(title = \"US Airports\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-31-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\nggplot(data = hwy) +\n  geom_sf(color = \"orange\") +\n  labs(title = \"US Highways\")\n```\n\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-31-3.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Layering\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](14-spatial-2_files/figure-revealjs/unnamed-chunk-32-1.png){fig-align='center' width=3000}\n:::\n:::\n\n\n## **Which counties have airports?**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnc_airports <- st_intersects(nc, air)\nstr(nc_airports)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 100\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 268\n $ : int 717\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 904\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 764\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 543\n $ : int 892\n $ : int 647\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 176\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 789\n $ : int 902\n $ : int(0) \n $ : int 377\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 407\n $ : int(0) \n $ : int(0) \n $ : int [1:2] 516 593\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int [1:2] 491 626\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 597\n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int(0) \n $ : int 674\n  [list output truncated]\n - attr(*, \"predicate\")= chr \"intersects\"\n - attr(*, \"region.id\")= chr [1:100] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"remove_self\")= logi FALSE\n - attr(*, \"retain_unique\")= logi FALSE\n - attr(*, \"ncol\")= int 940\n - attr(*, \"class\")= chr [1:2] \"sgbp\" \"list\"\n```\n\n\n:::\n:::\n\n\n## Which counties have airports?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhas_airport <- map_lgl(nc_airports, ~ length(.) > 0)\nnc |> \n  slice(which(has_airport)) |> \n  pull(COUNTY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Forsyth County\"     \"Guilford County\"   \n [3] \"Dare County\"        \"Wake County\"       \n [5] \"Pitt County\"        \"Catawba County\"    \n [7] \"Buncombe County\"    \"Wayne County\"      \n [9] \"Mecklenburg County\" \"Moore County\"      \n[11] \"Cabarrus County\"    \"Lenoir County\"     \n[13] \"Craven County\"      \"Cumberland County\" \n[15] \"Onslow County\"      \"New Hanover County\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}