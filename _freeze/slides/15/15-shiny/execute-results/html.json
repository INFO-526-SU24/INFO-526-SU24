{
  "hash": "83beb2102b288a4ae1bd46834784cc49",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Interactive reporting + visualization with Shiny\nsubtitle: Lecture 15\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\n  warning: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(gganimate)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# From last time\n\n## The racing bar chart\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](15-shiny_files/figure-revealjs/freedom-race-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## Making of the racing bar chart\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|30-50|53|54-59|61|63|67-74|75\"}\nfreedom <- read_csv(here::here(\"slides/15\", \"data/freedom.csv\"), na = \"-\")\n\ncountries_to_plot <- freedom %>%\n  rowwise() %>%\n  mutate(sd = sd(c_across(contains(\"cl_\")), na.rm = TRUE)) %>%\n  ungroup() %>%\n  arrange(desc(sd)) %>%\n  relocate(country, sd) %>%\n  slice_head(n = 15) %>%\n  pull(country)\n\nfreedom_to_plot <- freedom %>%\n  filter(country %in% countries_to_plot) %>%\n  drop_na()\n\nfreedom_ranked <- freedom_to_plot %>%\n  select(country, contains(\"cl_\")) %>%\n  pivot_longer(\n    cols = -country,\n    names_to = \"year\",\n    values_to = \"civil_liberty\",\n    names_prefix = \"cl_\",\n    names_transform = list(year = as.numeric)\n  ) %>%\n  group_by(year) %>%\n  mutate(rank_in_year = rank(civil_liberty, ties.method = \"first\")) %>%\n  ungroup() %>%\n  mutate(is_turkey = if_else(country == \"Turkey\", TRUE, FALSE))\n\nfreedom_faceted_plot <- freedom_ranked %>%\n  ggplot(aes(x = civil_liberty, y = factor(rank_in_year))) +\n  geom_col(aes(fill = is_turkey), show.legend = FALSE) +\n  scale_fill_manual(values = c(\"gray\", \"red\")) +\n  facet_wrap(~year) +\n  scale_x_continuous(\n    limits = c(-5, 7),\n    breaks = 1:7\n  ) +\n  geom_text(\n    hjust = \"right\",\n    aes(label = country),\n    x = -1\n  ) +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    axis.text.y = element_blank()\n  ) +\n  labs(x = NULL, y = NULL)\n\nfreedom_bar_race <- freedom_faceted_plot +\n  facet_null() +\n  geom_text(\n    x = 5, y = 1,\n    hjust = \"left\",\n    aes(label = as.character(year)),\n    size = 10\n  ) +\n  aes(group = country) +\n  transition_time(as.integer(year)) +\n  labs(\n    title = \"Civil liberties rating, {frame_time}\",\n    subtitle = \"1: Highest degree of freedom - 7: Lowest degree of freedom\"\n  )\n\nanimate(\n  freedom_bar_race,\n  fps      = 2,\n  nframes  = 30,\n  width    = 900,\n  height   = 560,\n  renderer = gifski_renderer()\n  )\nanim_save(\"gifs/freedom_bar_race.gif\")\n```\n:::\n\n\n# Shiny: High level view\n\n## Shiny {.center}\n\nEvery Shiny app has a webpage that the user visits, <br> and behind this webpage there is a computer that serves this webpage by running R.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Shiny {.center}\n\nWhen running your app locally, the computer serving your app is your computer.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Shiny {.center}\n\nWhen your app is deployed, the computer serving your app is a web server.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-3.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Shiny {.center}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-4.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Demo\n\n::: columns\n::: {.column width=\"50%\"}\n::: task\n-   Clone the [`shiny-ex`](https://github.com/INFO526-DataViz/shiny-ex) repo.\n-   Launch the app by opening the `app.R` file and clicking on *Run App*.\n-   Close the app by clicking the stop icon\n-   Select view mode in the drop down menu next to Run App\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://gallery.shinyapps.io/goog-trend-index/?showcase=0\" width=\"100%\" height=\"650px\" data-external=\"1\"></iframe>\n:::\n\n:::\n:::\n\n# Anatomy of a Shiny app\n\n## What's in an app?\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\nui <- fluidPage()\n\n\nserver <- function(\n    input, \n    output, \n    session) {\n  ...\n}\n\n\nshinyApp(\n  ui = ui, \n  server = server\n  )\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n-   **User interface** controls the layout and appearance of app\n\n-   **Server function** contains instructions needed to build app\n:::\n:::\n\n## Data: Health expenditure vs. life expectancy {.smaller}\n\n> Source: [World Bank](https://databank.worldbank.org/) and [googleCharts](https://github.com/jcheng5/googleCharts)\n\n**Data: `healthexp.Rds`**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhealth <- readRDS(here::here(\"slides/15\", \"data/healthexp.Rds\"))\nhealth |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,030\nColumns: 6\n$ Country            <fct> \"Albania\", \"Algeria\", \"Angola\", \"Arg…\n$ Region             <chr> \"Europe & Central Asia\", \"Middle Eas…\n$ Year               <dbl> 1995, 1995, 1995, 1995, 1995, 1995, …\n$ Population         <dbl> 3141102, 28291591, 12105105, 3485516…\n$ Life.Expectancy    <dbl> 71.87029, 68.46588, 42.05093, 72.623…\n$ Health.Expenditure <dbl> 28.22459, 62.05589, 20.74863, 615.41…\n```\n\n\n:::\n:::\n\n\n## Ultimate goal {.smaller}\n\n::: {.medium .center-align}\n<https://shiny.posit.co/r/gallery/interactive-visualizations/google-charts/>\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://gallery.shinyapps.io/182-google-charts/?showcase=0\" width=\"2100\" height=\"550px\" data-external=\"1\"></iframe>\n:::\n\n\n# Interactive reporting with Shiny\n\n## Livecoding\n\n::: task\nCode along in [`shiny-examples/182-google-charts/app.R`](https://github.com/rstudio/shiny-examples/blob/main/182-google-charts/app.R).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}