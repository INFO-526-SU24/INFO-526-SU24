{
  "hash": "d8356c90037e6a174f4a29ecfed61367",
  "result": {
    "markdown": "---\ntitle: Interactive reporting + visualization with Shiny\nsubtitle: Lecture 19\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\n  warning: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(gganimate)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)\n```\n:::\n\n\n# From last time\n\n## The racing bar chart\n\n\n::: {.cell layout-align=\"center\" hash='19-shiny-I_cache/revealjs/freedom-race_4674f1c82bba576ac8c4c7dfa3f0798f'}\n::: {.cell-output-display}\n![](19-shiny-I_files/figure-revealjs/freedom-race-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## Making of the racing bar chart\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|30-50|53|54-59|61|63|67-74|75\"}\nfreedom <- read_csv(here::here(\"slides/19\", \"data/freedom.csv\"), na = \"-\")\n\ncountries_to_plot <- freedom %>%\n  rowwise() %>%\n  mutate(sd = sd(c_across(contains(\"cl_\")), na.rm = TRUE)) %>%\n  ungroup() %>%\n  arrange(desc(sd)) %>%\n  relocate(country, sd) %>%\n  slice_head(n = 15) %>%\n  pull(country)\n\nfreedom_to_plot <- freedom %>%\n  filter(country %in% countries_to_plot) %>%\n  drop_na()\n\nfreedom_ranked <- freedom_to_plot %>%\n  select(country, contains(\"cl_\")) %>%\n  pivot_longer(\n    cols = -country,\n    names_to = \"year\",\n    values_to = \"civil_liberty\",\n    names_prefix = \"cl_\",\n    names_transform = list(year = as.numeric)\n  ) %>%\n  group_by(year) %>%\n  mutate(rank_in_year = rank(civil_liberty, ties.method = \"first\")) %>%\n  ungroup() %>%\n  mutate(is_turkey = if_else(country == \"Turkey\", TRUE, FALSE))\n\nfreedom_faceted_plot <- freedom_ranked %>%\n  ggplot(aes(x = civil_liberty, y = factor(rank_in_year))) +\n  geom_col(aes(fill = is_turkey), show.legend = FALSE) +\n  scale_fill_manual(values = c(\"gray\", \"red\")) +\n  facet_wrap(~year) +\n  scale_x_continuous(\n    limits = c(-5, 7),\n    breaks = 1:7\n  ) +\n  geom_text(\n    hjust = \"right\",\n    aes(label = country),\n    x = -1\n  ) +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    axis.text.y = element_blank()\n  ) +\n  labs(x = NULL, y = NULL)\n\nfreedom_bar_race <- freedom_faceted_plot +\n  facet_null() +\n  geom_text(\n    x = 5, y = 1,\n    hjust = \"left\",\n    aes(label = as.character(year)),\n    size = 10\n  ) +\n  aes(group = country) +\n  transition_time(as.integer(year)) +\n  labs(\n    title = \"Civil liberties rating, {frame_time}\",\n    subtitle = \"1: Highest degree of freedom - 7: Lowest degree of freedom\"\n  )\n\nanimate(\n  freedom_bar_race,\n  fps      = 2,\n  nframes  = 30,\n  width    = 900,\n  height   = 560,\n  renderer = gifski_renderer()\n  )\nanim_save(\"gifs/freedom_bar_race.gif\")\n```\n:::\n\n\n# Shiny: High level view\n\n## Shiny {.center}\n\nEvery Shiny app has a webpage that the user visits, <br> and behind this webpage there is a computer that serves this webpage by running R.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Shiny {.center}\n\nWhen running your app locally, the computer serving your app is your computer.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Shiny {.center}\n\nWhen your app is deployed, the computer serving your app is a web server.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-3.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Shiny {.center}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/high-level-4.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Demo\n\n::: columns\n::: {.column width=\"50%\"}\n::: task\n-   Clone the [`shiny-ex`](https://github.com/INFO526-DataViz/shiny-ex) repo.\n-   Launch the app by opening the `app.R` file and clicking on *Run App*.\n-   Close the app by clicking the stop icon\n-   Select view mode in the drop down menu next to Run App\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://gallery.shinyapps.io/goog-trend-index/?showcase=0\" width=\"100%\" height=\"650px\" data-external=\"1\"></iframe>\n:::\n\n:::\n:::\n\n# Anatomy of a Shiny app\n\n## What's in an app?\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\nui <- fluidPage()\n\n\nserver <- function(\n    input, \n    output, \n    session) {\n  ...\n}\n\n\nshinyApp(\n  ui = ui, \n  server = server\n  )\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n-   **User interface** controls the layout and appearance of app\n\n-   **Server function** contains instructions needed to build app\n:::\n:::\n\n## Data: Ask a manager\n\nSource: Ask a Manager Survey via [TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-05-18)\n\n> This data does not reflect the general population; it reflects Ask a Manager readers who self-selected to respond, which is a very different group (as you can see just from the demographic breakdown below, which is very white and very female).\n\nSome findings [here](https://www.askamanager.org/2021/05/some-findings-from-24000-peoples-salaries.html).\n\n## Data: `manager`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmanager <- read_csv(here::here(\"slides/19\", \"data/survey.csv\"))\nmanager\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,232 × 18\n   timestamp          how_old_are_you industry          job_title\n   <chr>              <chr>           <chr>             <chr>    \n 1 4/27/2021 11:02:10 25-34           Education (Highe… Research…\n 2 4/27/2021 11:02:22 25-34           Computing or Tech Change &…\n 3 4/27/2021 11:02:38 25-34           Accounting, Bank… Marketin…\n 4 4/27/2021 11:02:41 25-34           Nonprofits        Program …\n 5 4/27/2021 11:02:42 25-34           Accounting, Bank… Accounti…\n 6 4/27/2021 11:02:46 25-34           Education (Highe… Scholarl…\n 7 4/27/2021 11:02:51 25-34           Publishing        Publishi…\n 8 4/27/2021 11:03:00 25-34           Education (Prima… Librarian\n 9 4/27/2021 11:03:01 45-54           Computing or Tech Systems …\n10 4/27/2021 11:03:02 35-44           Accounting, Bank… Senior A…\n# ℹ 26,222 more rows\n# ℹ 14 more variables: additional_context_on_job_title <chr>,\n#   annual_salary <dbl>, other_monetary_comp <dbl>,\n#   currency <chr>, currency_other <chr>,\n#   additional_context_on_income <chr>, country <chr>,\n#   state <chr>, city <chr>,\n#   overall_years_of_professional_experience <chr>, …\n```\n:::\n:::\n\n\n## Ultimate goal\n\n::: {.medium .center-align}\n[https://minecr.shinyapps.io/manager-survey](https://minecr.shinyapps.io/manager-survey/)\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe src=\"https://minecr.shinyapps.io/manager-survey/?showcase=0\" width=\"2100\" height=\"550px\" data-external=\"1\"></iframe>\n:::\n\n\n# Interactive reporting with Shiny\n\n## Livecoding\n\n::: task\nCode along in `manager-survey/app.R`. We will do part 1 today, parts 2-3 Monday.\n:::\n\n<br>\n\nHighlights:\n\n-   Data pre-processing\n-   Basic reactivity\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}