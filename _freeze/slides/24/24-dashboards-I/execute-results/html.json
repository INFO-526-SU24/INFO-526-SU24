{
  "hash": "db333a32aeef5c67c7015148b830da04",
  "result": {
    "markdown": "---\ntitle: Dashboards I\nsubtitle: Lecture 24\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\n  warning: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Warm up\n\n## Announcements\n\n-   Course and TA evaluations\n    -   If we can get to \\>=90% participation for both, each person gets +5 points on their lowest (not dropped) homework score.\n    -   Current participation rate: TA evals 8.5% and course evals 5.9%.\n\n# Dashboards\n\n## Dashboards\n\n**2006:**\n\n::: incremental\n-   Visually display most important information on one screen\n\n-   Monitored by a glance\n:::\n\n**2020+:**\n\n::: incremental\n-   Reactive to user needs & questions\n\n-   Regularly updating\n\n-   Produces reports\n:::\n\n## Several (common) tools\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/shiny.png){fig-align=\"center\" width=\"173\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/powerBI.png){fig-align=\"center\" width=\"200\"}\n:::\n:::\n\n![](images/tableau.png){fig-align=\"center\" width=\"506\"}\n\n## Key performance indicators (KPIs)\n\n**Benchmarks**\n\n-   **Outcomes**\n\n    ::: incremental\n    -   ðŸŒ® Increase customer satisfaction\n\n    -   ðŸš¹ ðŸšº Address inequity in salaries\n\n    -   ðŸ¦• Grow audience & Patreon subscribers\n    :::\n\n## Key performance indicators (KPIs) {.smaller}\n\n**Project measurements**\n\n-   **Inputs**\n\n    ::: incremental\n    -   ðŸŒ® Ingredient costs, labor costs\n\n    -   ðŸš¹ ðŸšº Employee data, salary data\n\n    -   ðŸ¦• Viewership/subscribers\n    :::\n\n-   **Process**\n\n    ::: incremental\n    -   ðŸŒ® Speedy service, product consistency\n\n    -   ðŸš¹ ðŸšº Contract amounts, raises + promotions\n\n    -   ðŸ¦• Speed of production, number of revisions\n    :::\n\n-   **Outcome**\n\n    ::: incremental\n    -   ðŸŒ® Good tacos in minimal time\n\n    -   ðŸš¹ ðŸšº Individuals with unequal pay\n\n    -   ðŸ¦• Interesting and educational videos\n    :::\n\n## Key performance indicators (KPIs) {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n::: fragment\n**Lagging KPI:**\n\n-   Performance indicator of something that has happened\n\n![](images/lagging.jpg){fig-align=\"center\" width=\"250\"}\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: fragment\n**Leading KPI:**\n\n-   Performance indicator that signals something to come\n\n![](images/leading.jpg){fig-align=\"center\" width=\"250\"}\n:::\n:::\n:::\n\n## Dashboards\n\n**Named after car dashboards**\n\n![](images/dashboard.jpg){fig-align=\"center\" width=\"640\"}\n\n## Dashboard visualizations {.smaller}\n\n**Gauge plot**: They are all what Edward Tufte would call \"low data to ink\" plots (and which he would hate)\n\n-   Speedometers = low-information donut plot where only one number means anything about the data.\n\n-   The other numbers & colors are there to provide context and meaning for that data point.\n\n-   For all of these, you could cover up the dial and just leave the number and you'd have the same info.\n\n## Making gauge plots {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(plotly)\n\nfig <- plot_ly(\n    domain = list(x = c(0, 1), y = c(0, 1)),\n    value = 270,\n    title = list(text = \"Speed\"),\n    type = \"indicator\",\n    mode = \"gauge+number\") \nfig <- fig %>%\n  layout(margin = list(l=20,r=30))\n\nfig\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-8330128ca1295798c3db\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8330128ca1295798c3db\">{\"x\":{\"visdat\":{\"15c5978651e2f\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"15c5978651e2f\",\"attrs\":{\"15c5978651e2f\":{\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"value\":270,\"title\":{\"text\":\"Speed\"},\"mode\":\"gauge+number\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"indicator\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":20,\"t\":25,\"r\":30},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"value\":270,\"title\":{\"text\":\"Speed\"},\"mode\":\"gauge+number\",\"type\":\"indicator\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Making gauge plots II {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfig <- plot_ly(\n  domain = list(x = c(0, 1), y = c(0, 1)),\n  value = 450,\n  title = list(text = \"Speed\"),\n  type = \"indicator\",\n  mode = \"gauge+number+delta\",\n  delta = list(reference = 380),\n  gauge = list(\n    axis =list(range = list(NULL, 500)),\n    steps = list(\n      list(range = c(0, 250), color = \"lightgray\"),\n      list(range = c(250, 400), color = \"gray\")),\n    threshold = list(\n      line = list(color = \"red\", width = 4),\n      thickness = 0.75,\n      value = 490))) \nfig <- fig %>%\n  layout(margin = list(l=20,r=30))\n\nfig\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-2f00f37367fc8fc770e0\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2f00f37367fc8fc770e0\">{\"x\":{\"visdat\":{\"15c597b283483\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"15c597b283483\",\"attrs\":{\"15c597b283483\":{\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"value\":450,\"title\":{\"text\":\"Speed\"},\"mode\":\"gauge+number+delta\",\"delta\":{\"reference\":380},\"gauge\":{\"axis\":{\"range\":[null,500]},\"steps\":[{\"range\":[0,250],\"color\":\"lightgray\"},{\"range\":[250,400],\"color\":\"gray\"}],\"threshold\":{\"line\":{\"color\":\"red\",\"width\":4},\"thickness\":0.75,\"value\":490}},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"indicator\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":20,\"t\":25,\"r\":30},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"value\":450,\"title\":{\"text\":\"Speed\"},\"mode\":\"gauge+number+delta\",\"delta\":{\"reference\":380},\"gauge\":{\"axis\":{\"range\":[[],500]},\"steps\":[{\"range\":[0,250],\"color\":\"lightgray\"},{\"range\":[250,400],\"color\":\"gray\"}],\"threshold\":{\"line\":{\"color\":\"red\",\"width\":4},\"thickness\":0.75,\"value\":490}},\"type\":\"indicator\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Bullet charts {.smaller}\n\n**Similar to battery charts**:\n\n-   Essentially stacked bar plot\n\n-   Gray/\"uncharged\" group\n\n-   Colored/\"charged\" proportion group\n\n-   Adds to 100\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfig <- plot_ly(\n  type = \"indicator\",\n  mode = \"number+gauge+delta\",\n  gauge = list(shape = \"bullet\"),\n  delta = list(reference = 300),\n  value = 220,\n  domain = list(x = c(0, 1), y = c(0, 1)),\n  title= list(text = \"Profit\"),\n  height = 150,\n  width = 400)\n\nfig\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f98c039f258db928e319\" style=\"width:400px;height:150px;\" class=\"plotly html-widget \"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f98c039f258db928e319\">{\"x\":{\"visdat\":{\"15c59327443d1\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"15c59327443d1\",\"attrs\":{\"15c59327443d1\":{\"mode\":\"number+gauge+delta\",\"gauge\":{\"shape\":\"bullet\"},\"delta\":{\"reference\":300},\"value\":220,\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"title\":{\"text\":\"Profit\"},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"indicator\"}},\"layout\":{\"width\":400,\"height\":150,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"mode\":\"number+gauge+delta\",\"gauge\":{\"shape\":\"bullet\"},\"delta\":{\"reference\":300},\"value\":220,\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"title\":{\"text\":\"Profit\"},\"type\":\"indicator\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n:::\n\n## Value boxes\n\n![](images/value-boxes.png){fig-align=\"center\"}\n\n::: incremental\n-   Shows key information\n\n-   Digestible\n\n-   Uses **Icons**\n:::\n\n## Icons {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/icons.jpg){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n-   Common car warning lights\n\n-   Do all make sense without a label?\n\n-   With dashboards you can have hover-over labels or include text, but only while that icon still likely retains meaning\n\n-   Icons lose & gain meaning much faster than you would expect\n\n::: fragment\n::: columns\n::: {.column width=\"50%\"}\n![](images/heart.png){fig-align=\"center\" width=\"97\"}\n:::\n\n::: {.column width=\"50%\"}\nStarted being used for romantic love in the 1400's\n:::\n:::\n:::\n:::\n:::\n\n## Quarto dashboards\n\n-   Similar structure to what we've been using!\n\n-   Simpler / more straightforward than Shiny\n\n-   Aesthetically pleasing\n\n# Dashboard layout\n\n## **Navigation**\n\n![](images/navigation-toolbar.png){fig-align=\"center\"}\n\n``` yaml\ntitle: \"Palmer Penguins\"\nauthor: \"Cobblepot Analytics\"\nformat: \n  dashboard:\n    logo: images/penguins.png\n    nav-buttons: [linkedin, twitter, github]\n```\n\n## Layout\n\n::: columns\n::: {.column width=\"50%\"}\n``` yaml\ntitle: \"Palmer Penguins\"\nauthor: \"Cobblepot Analytics\"\nformat: dashboard\n```\n\n```` markdown\n## Row {height=70%}\n\n::: {.cell}\n\n:::\n\n## Row {height=30%}\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n````\n:::\n\n::: {.column width=\"50%\"}\n![](images/chart-focal-top.png){fig-align=\"center\" width=\"462\"}\n:::\n:::\n\n## Orientation\n\n::: columns\n::: {.column width=\"50%\"}\n``` yaml\ntitle: \"Diamonds Explorer\"\nauthor: \"Cobblepot Analytics\"\nformat: \n  dashboard:\n    orientation: columns\n```\n\n```` markdown\n## Column {height=60%}\n\n::: {.cell}\n\n:::\n\n## Column {height=40%}\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n````\n:::\n\n::: {.column width=\"50%\"}\n![](images/chart-focal-left.png){fig-align=\"center\" width=\"488\"}\n:::\n:::\n\n## Scrolling\n\n::: columns\n::: {.column width=\"50%\"}\n``` yaml\ntitle: \"Diamonds Explorer\"\nauthor: \"Cobblepot Analytics\"\nformat: \n  dashboard:\n    scrolling: true\n```\n\n```` markdown\n## Column {height=60%}\n\n::: {.cell}\n\n:::\n\n## Column {height=40%}\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n````\n:::\n\n::: {.column width=\"50%\"}\n![](images/chart-stack-scrolling.png){fig-align=\"center\" width=\"488\"}\n:::\n:::\n\n## Pages {.smaller}\n\n``` yaml\ntitle: \"Palmer Penguins\"\nformat: dashboard\n```\n\n```` markdown\n# Bills \n\n::: {.cell}\n\n:::\n\n# Flippers {orientation=\"columns\" scrolling=\"true\"}\n\n## Column\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n## Column \n\n::: {.cell}\n\n:::\n````\n\n## Tabsets\n\n::: columns\n::: {.column width=\"50%\"}\n``` yaml\ntitle: \"Palmer Penguins\"\nformat: dashboard\n```\n\n```` markdown\n## Row\n\n::: {.cell}\n\n:::\n\n## Row {.tabset}\n\n::: {.cell title='Chart 2'}\n\n:::\n\n::: {.cell title='Chart 3'}\n\n:::\n````\n:::\n\n::: {.column width=\"50%\"}\n![](images/chart-tabset-row.png){fig-align=\"center\" width=\"488\"}\n:::\n:::\n\n## Tabsets\n\n::: columns\n::: {.column width=\"50%\"}\n``` yaml\ntitle: \"Palmer Penguins\"\nformat: dashboard\n```\n\n```` markdown\n## Row {height=70%}\n\n::: {.cell}\n\n:::\n\n## Row {height=30%}\n\n### Column {.tabset}\n\n::: {.cell title='Chart 2'}\n\n:::\n\n::: {.cell title='Chart 3'}\n\n:::\n\n### Column\n\n::: {.cell}\n\n:::\n````\n:::\n\n::: {.column width=\"50%\"}\n![](images/chart-tabset-card.png){fig-align=\"center\" width=\"488\"}\n:::\n:::\n\n## Cards {.smaller}\n\nCreated automatically for cells & markdown content that are within rows/columns:\n\n```` markdown\n## Column {width=40%}\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n````\n\nCan also just contain markdown via `.card`\n\n```` markdown\n## Column {width=40%}\n\n::: {.cell}\n\n:::\n\n::: {.card}\nThis text will be displayed within a card\n:::\n\n::: {.cell}\n\n:::\n````\n\n## More\n\nThe above and more can be found [here](https://quarto.org/docs/dashboards/layout.html)!\n\n## Next time\n\n\n::: {.cell}\n<iframe src=\"https://mine-cetinkaya-rundel.github.io/ld-dashboard/?showcase=0\" width=\"960\" height=\"600px\" data-external=\"1\"></iframe>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.2/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}