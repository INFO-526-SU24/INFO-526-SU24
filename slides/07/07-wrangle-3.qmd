---
title: Data wrangling - III
subtitle: Lecture 8
title-slide-attributes:
  data-background-image: ../vizdata-bg.png
  data-background-size: 800px, cover
  data-slide-number: none
format: revealjs
highlight-style: a11y
execute:
  code-link: true
  warning: true
editor_options: 
  chunk_output_type: console
---

# Warm up

## Announcements

-   RQ 3 is due Feb 19th
-   Project 1 reviews will be returned to you by Wednesday

## Setup {.smaller}

```{r}
#| label: setup
#| message: false

# load packages
library(countdown)
library(tidyverse)
library(glue)
library(lubridate)
library(scales)
library(ggthemes)
library(gt)
library(palmerpenguins)
library(openintro)
library(ggrepel)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
```

## Missing values I

::: columns
::: {.column width="50%"}
::: task
Is it ok to suppress the following warning? Or should you update your code to eliminate it?
:::

```{r}
df <- tibble(
  x = c(1, 2, 3, NA, 3),
  y = c(5, NA, 10, 0, 5)
)
```
:::

::: {.column width="50%"}
```{r}
#| fig-width: 6

ggplot(df, aes(x = x, y = y)) +
  geom_point(size = 3)
```
:::
:::

## Missing values II

```{r}
set.seed(1234)
df <- tibble(x = rnorm(100))
```

::: columns
::: {.column width="50%"}
```{r}
#| fig-width: 6

p <- ggplot(df, aes(x = x)) +
  geom_boxplot()
p
```
:::

::: {.column width="50%"}
```{r}
df |>
  summarize(med_x = median(x))
```
:::
:::

## Missing values II {.smaller}

::: task
Is it ok to suppress the following warning? Or should you update your code to eliminate it?
:::

```{r}
#| fig-asp: 0.5
#| fig-width: 6

p + xlim(0, 2)
```

## Missing values II

::: task
Is it ok to suppress the following warning? Or should you update your code to eliminate it?
:::

```{r}
#| fig.asp: 0.5
#| fig-width: 6

p + scale_x_continuous(limits = c(0, 2))
```

## Missing values II

::: task
Why doesn't the following generate a warning?
:::

```{r}
#| fig.asp: 0.5
#| fig-width: 6

p + coord_cartesian(xlim = c(0, 2))
```

# Coordinate systems

## Coordinate systems: purpose

-   Combine the two position aesthetics (`x` and `y`) to produce a 2d position on the plot:
    -   linear coordinate system: horizontal and vertical coordinates
    -   polar coordinate system: angle and radius
    -   maps: latitude and longitude
-   Draw axes and panel backgrounds in coordination with the faceter coordinate systems

## Coordinate systems: types {.smaller}

1.  **Linear coordinate systems:** preserve the shape of geoms

-   `coord_cartesian()`: the default Cartesian coordinate system, where the 2d position of an element is given by the combination of the x and y positions.
-   `coord_fixed()`: Cartesian coordinate system with a fixed aspect ratio. *(useful only in limited circumstances)*

. . .

2.  **Non-linear coordinate systems:** can change the shapes -- a straight line may no longer be straight. The closest distance between two points may no longer be a straight line.

-   `coord_trans()`: Apply arbitrary transformations to x and y positions, after the data has been processed by the stat
-   `coord_polar()`: Polar coordinates
-   `coord_sf()`: Map projections

## Setting limits: what the plots say {.smaller}

```{r}
#| label: set-limits
#| fig-show: hold
#| warning: false
#| message: false
#| layout-ncol: 2
#| output-location: slide
#| fig-asp: 0.5

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() + geom_smooth() +
  labs(title = "Plot 1")

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() + geom_smooth() +
  scale_x_continuous(limits = c(190, 220)) + scale_y_continuous(limits = c(4000, 5000)) +
  labs(title = "Plot 2")

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() + geom_smooth() +
  xlim(190, 220) + ylim(4000, 5000) +
  labs(title = "Plot 3")

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() + geom_smooth() +
  coord_cartesian(xlim = c(190,220), ylim = c(4000, 5000)) +
  labs(title = "Plot 4")
```

## Setting limits: what the warnings say {.smaller}

```{r}
#| ref.label: set-limits
#| fig-show: hide
#| message: true
```

## Setting limits

-   Setting scale limits: Any data outside the limits is thrown away
    -   `scale_*_continuous()`, `xlim` and `ylim` arguments
    -   `xlim()` and `ylim()`
-   Setting coordinate system limits: Use all the data, but only display a small region of the plot (zooming in)
    -   `coord_cartesian()`, `xlim` and `ylim` arguments

## Fixing aspect ratio with `coord_fixed()` {.smaller}

Useful when having an aspect ratio of 1 makes sense, e.g. scores on two tests (reading and writing) on the same scale (0 to 100 points)

```{r}
#| layout-ncol: 2
#| fig-show: hold
#| message: false
#| output-location: slide

ggplot(hsb2, aes(x = read, y = write)) +
  geom_point() + geom_smooth(method = "lm") +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
  labs(title = "Not fixed")

ggplot(hsb2, aes(x = read, y = write)) +
  geom_point() + geom_smooth(method = "lm") +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
  coord_fixed() +
  labs(title = "Fixed")
```

## Pie charts and bullseye charts with `coord_polar()` {.smaller}

```{r}
#| layout-ncol: 3
#| warning: false
#| message: false
#| fig-show: hold

ggplot(penguins, aes(x = 1, fill = species)) +
  geom_bar() +
  labs(title = "Stacked bar chart")

ggplot(penguins, aes(x = 1, fill = species)) +
  geom_bar() +
  coord_polar(theta = "y") +
  labs(title = "Pie chart")

ggplot(penguins, aes(x = 1, fill = species)) +
  geom_bar() +
  coord_polar(theta = "x") +
  labs(title = "Bullseye chart")
```

##  {.center}

::: hand
aside: about pie charts...
:::

## Pie charts

::: task
What do you know about pie charts and data visualization best practices? Love 'em or lose 'em?
:::

```{r}
#| echo: false
#| layout-ncol: 2

loans <- loans_full_schema |>
  mutate(application_type = as.character(application_type)) |>
  filter(application_type != "") |>
  mutate(
    homeownership    = tolower(homeownership), 
    homeownership    = fct_relevel(homeownership, "rent", "mortgage", "own"), 
    application_type = fct_relevel(application_type, "joint", "individual")
    ) 

pie_homeownership <- loans |> 
  mutate(homeownership = fct_infreq(homeownership)) |>
  count(homeownership) |>
  mutate(text_y = cumsum(n) - n/2) |>
  ggplot(aes(x = "", fill = homeownership, y = n)) + 
  geom_col(position = position_stack(reverse = TRUE), show.legend = FALSE) +
  geom_text_repel(aes(x = 1, label = homeownership, y = text_y)) +
  coord_polar("y", start = 0) +
  scale_fill_openintro("hot") +
  theme_void(base_size = 16) +
  labs(title = "Homeownership")
pie_homeownership

pie_loan_grades <- loans |> 
  count(grade) |> 
  mutate(text_y = cumsum(n) - n/2) |> 
  ggplot(aes(x = "", fill = grade, y = n)) + 
  geom_col(position = position_stack(reverse = TRUE), show.legend = FALSE) +
  geom_text_repel(aes(x = 1.4, label = grade, y = text_y), nudge_x = 0.3, segment.size = 0.5) + 
  coord_polar(theta = "y") + 
  scale_fill_openintro("cool") +
  theme_void(base_size = 16) +
  labs(title = "Loan grade")
pie_loan_grades
```

## Pie charts: when to love 'em, when to lose 'em {.smaller}

For categorical variables with few levels, bar charts can work well

```{r}
#| layout-ncol: 2

pie_homeownership

loans %>%
  ggplot(aes(x = homeownership, fill = homeownership)) +
  geom_bar(show.legend = FALSE) +
  scale_fill_openintro("hot") +
  labs(x = "Homeownership", y = "Count")
```

## Pie charts: when to love 'em, when to lose 'em {.smaller}

For categorical variables with many levels, bar charts are difficult to read

```{r}
#| layout-ncol: 2

pie_loan_grades

loans |>
  ggplot(aes(x = grade, fill = grade)) +
  geom_bar(show.legend = FALSE) +
  scale_fill_openintro("cool") +
  labs(x = "Loan grade", y = "Count")
```

# Bringing together multiple data frames

## Scenario 2

::: hand
We...

have **multiple** data frames

want to want to bring them together so we can plot them
:::

```{r}
#| eval: false

professions <- read_csv("data/professions.csv")
dates <- read_csv("data/dates.csv")
works <- read_csv("data/works.csv")
```

```{r}
#| echo: false
#| message: false

professions <- read_csv(here::here("slides/07", "data/professions.csv"))
dates <- read_csv(here::here("slides/07", "data/dates.csv"))
works <- read_csv(here::here("slides/07", "data/works.csv"))
```

## 10 women in science who changed the world {.smaller}

```{r echo=FALSE}
#| echo: false

professions |> select(name) |> gt()
```

::: aside
Source: [Discover Magazine](https://www.discovermagazine.com/the-sciences/meet-10-women-in-science-who-changed-the-world)
:::

## Inputs

::: panel-tabset
### professions

```{r}
professions
```

### dates

```{r}
dates
```

### works

```{r}
works
```
:::

## Desired output

```{r}
#| echo: false
#| message: false

professions |>
  left_join(dates) |>
  left_join(works)
```

## Inputs, reminder

::: columns
::: {.column width="50%"}
```{r}
names(professions)
names(dates)
names(works)
```
:::

::: {.column width="50%"}
```{r}
nrow(professions)
nrow(dates)
nrow(works)
```
:::
:::

## Joining data frames {.smaller}

```{r}
#| eval: false

something_join(x, y)
```

-   `left_join()`: all rows from x
-   `right_join()`: all rows from y
-   `full_join()`: all rows from both x and y
-   `semi_join()`: all rows from x where there are matching values in y, keeping just columns from x
-   `inner_join()`: all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches
-   `anti_join()`: return all rows from x where there are not matching values in y, never duplicate rows of x
-   ...

## Setup

For the next few slides...

::: columns
::: {.column width="50%"}
```{r}
x <- tibble(
  id = c(1, 2, 3),
  value_x = c("x1", "x2", "x3")
  )

x
```
:::

::: {.column width="50%"}
```{r}
y <- tibble(
  id = c(1, 2, 4),
  value_y = c("y1", "y2", "y4")
  )

y
```
:::
:::

## `left_join()`

::: columns
::: {.column width="50%"}
![](images/left-join.gif)
:::

::: {.column width="50%"}
```{r}
left_join(x, y)
```
:::
:::

## `left_join()`

```{r}
professions |>
  left_join(dates)
```

## `right_join()`

::: columns
::: {.column width="50%"}
![](images/right-join.gif)
:::

::: {.column width="50%"}
```{r}
right_join(x, y)
```
:::
:::

## `right_join()`

```{r}
professions |>
  right_join(dates)
```

## `full_join()`

::: columns
::: {.column width="50%"}
![](images/full-join.gif)
:::

::: {.column width="50%"}
```{r}
full_join(x, y)
```
:::
:::

## `full_join()`

```{r}
dates |>
  full_join(works)
```

## `inner_join()`

::: columns
::: {.column width="50%"}
![](images/inner-join.gif)
:::

::: {.column width="50%"}
```{r}
inner_join(x, y)
```
:::
:::

## `inner_join()`

```{r}
dates |>
  inner_join(works)
```

## `semi_join()`

::: columns
::: {.column width="50%"}
![](images/semi-join.gif)
:::

::: {.column width="50%"}
```{r}
semi_join(x, y)
```
:::
:::

## `semi_join()`

```{r}
dates |>
  semi_join(works)
```

## `anti_join()`

::: columns
::: {.column width="50%"}
![](images/anti-join.gif)
:::

::: {.column width="50%"}
```{r}
anti_join(x, y)
```
:::
:::

## `anti_join()`

```{r}
dates |>
  anti_join(works)
```

## Putting it altogether

```{r}
scientists <- professions |>
  left_join(dates) |>
  left_join(works)

scientists
```

## `*_join()` functions

-   From **dplyr**
-   Incredibly useful for bringing datasets with common information (e.g., unique identifier) together
-   Use `by` argument when the names of the column containing the common information are not the same across datasets
-   Always check that the numbers of rows and columns of the result dataset makes sense
-   Refer to [two-table verbs vignette](https://dplyr.tidyverse.org/articles/two-table.html) when needed

## Visualizing joined data

```{r}
#| label: scientists-gantt-transform
#| echo: false

scientists_longer <- scientists |>
  mutate(
    birth_year = case_when(
      name == "Ada Lovelace" ~ 1815,
      name == "Marie Curie" ~ 1867,
      TRUE ~ birth_year
    ),
    death_year = case_when(
      name == "Ada Lovelace" ~ 1852,
      name == "Marie Curie" ~ 1934,
      name == "Flossie Wong-Staal" ~ 2020,
      TRUE ~ death_year
    ),
    status = if_else(is.na(death_year), "alive", "deceased"),
    death_year = if_else(is.na(death_year), 2021, death_year),
    known_for = if_else(name == "Rosalind Franklin", "understanding of the molecular structures of DNA ", known_for)
  ) |>
  pivot_longer(
    cols = contains("year"),
    names_to = "year_type",
    values_to = "year"
  ) |>
  mutate(death_year_fake = if_else(year == 2021, TRUE, FALSE))
```

```{r}
#| label: scientists-gantt-plot
#| echo: false
#| fig-asp: 0.55
#| out-width: "100%"
#| fig-width: 12
#| warning: false

ggplot(scientists_longer, 
       aes(x = year, y = fct_reorder(name, as.numeric(factor(profession))), group = name, color = profession)) +
  geom_point(aes(shape = death_year_fake), show.legend = FALSE) +
  geom_line(aes(linetype = status), show.legend = FALSE) +
  scale_shape_manual(values = c("circle", NA)) +
  scale_linetype_manual(values = c("dashed", "solid")) +
  scale_color_colorblind() +
  scale_x_continuous(expand = c(0.01, 0), breaks = seq(1820, 2020, 50)) +
  geom_text(aes(y = name, label = known_for), x = 2030, show.legend = FALSE, hjust = 0) +
  geom_text(aes(label = profession), x = 1809, y = Inf, hjust = 1, vjust = 1, show.legend = FALSE) +
  coord_cartesian(clip = "off") +
  labs(
    x = "Year", y = NULL,
    title = "10 women in science who changed the world",
    caption = "Source: Discover magazine"
  ) +
  facet_grid(profession ~ ., scales = "free_y", space = "free_y", switch = "x") +
  theme(
    plot.margin = unit(c(1, 23, 1, 4), "lines"),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    plot.caption = element_text(hjust = 2), # manual hack
    strip.background = element_blank(),
    strip.text = element_blank(),
    axis.title.x = element_text(hjust = 0),
    panel.background = element_rect(fill = "#f0f0f0", color = "white"),
    panel.grid.major = element_line(color = "white", size = 0.5)
  )
```

## But first...

::: task
What is the plot in the previous slide called?
:::

## Livecoding {.smaller}

Reveal below for code developed during live coding session.

-   Transform

```{r}
#| ref.label: scientists-gantt-transform
#| fig-show: hide
#| code-fold: true
```

-   Plot

```{r}
#| ref.label: scientists-gantt-plot
#| fig-show: hide
#| code-fold: true
#| warning: false
```
